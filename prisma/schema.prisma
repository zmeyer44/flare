// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

// generator client {
//   provider = "prisma-client-js"
// }
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int             @id @default(autoincrement())
  pubkey         String          @unique
  nip05          String?         @unique
  storageCredits StorageCredit[]
  uploads        Upload[]
  role           UserRole        @default(USER)
  password       String?
  email          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id           Int     @id @default(autoincrement())
  url          String  @db.VarChar(255)
  title        String? @db.VarChar(255)
  summary      String? @db.Text
  thumbnail    String?
  pubkey       String
  kind         Int
  d            String
  tags         Json
  published_at Int
  viewCount    Int     @default(0)
  views        View[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pubkey, d])
}

model View {
  id           Int    @id @default(autoincrement())
  a            String
  pubkey       String
  startSeconds Int    @default(0)
  endSeconds   Int?

  video   Video? @relation(fields: [videoId], references: [id])
  videoId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([a, pubkey])
  @@index(a)
  @@index(pubkey)
}

model StorageCredit {
  id             Int     @id @default(autoincrement())
  bytes          BigInt  @db.UnsignedBigInt
  paymentEventId String  @unique
  paymentEvent   Json
  paymentHash    String? @unique
  pubkey         String
  user           User    @relation(fields: [pubkey], references: [pubkey])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id     Int    @id @default(autoincrement())
  url    String
  pubkey String
  user   User   @relation(fields: [pubkey], references: [pubkey])
  size   BigInt @db.UnsignedBigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  PRO
}

// Nsec bunker stuff
model Request {
  id           String   @id @default(uuid())
  keyName      String?
  key          Key?     @relation(fields: [keyName], references: [keyName])
  requestId    String
  remotePubkey String
  method       String
  params       Json?
  allowed      Boolean?

  createdAt DateTime @default(now())
}

model KeyUser {
  id                Int                @id @default(autoincrement())
  keyName           String
  key               Key                @relation(fields: [keyName], references: [keyName])
  userPubkey        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  revokedAt         DateTime?
  lastUsedAt        DateTime?
  description       String?
  tokens            Token[]
  signingConditions SigningCondition[]

  @@unique([keyName, userPubkey])
}

model Key {
  id            Int       @id @default(autoincrement())
  keyName       String    @unique
  deletedAt     DateTime?
  pubkey        String
  encryptedNsec String
  tokens        Token[]
  requests      Request[]
  keyUsers      KeyUser[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Token {
  id         Int       @id @default(autoincrement())
  keyName    String
  key        Key       @relation(fields: [keyName], references: [keyName])
  token      String    @unique
  clientName String
  createdBy  String
  deletedAt  DateTime?
  expiresAt  DateTime?
  redeemedAt DateTime?
  keyUserId  Int?
  keyUser    KeyUser?  @relation(fields: [keyUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SigningCondition {
  id             Int      @id @default(autoincrement())
  method         String?
  kind           String?
  content        String?
  keyUserKeyName String?
  allowed        Boolean?
  keyUserId      Int?
  keyUser        KeyUser? @relation(fields: [keyUserId], references: [id])
}

model NostrEvent {
  key        Int     @id @default(autoincrement())
  id         String  @unique
  kind       Int
  content    String  @db.Text
  created_at Int
  pubkey     String
  tags       Json    @default("[]")
  sig        String
  d          String?
}
